<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luo的TD之旅~</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-23T16:32:05.975Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Luo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bat文件的编写</title>
    <link href="http://example.com/2023/04/23/bat%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E5%86%99/"/>
    <id>http://example.com/2023/04/23/bat%E6%96%87%E4%BB%B6%E7%9A%84%E7%BC%96%E5%86%99/</id>
    <published>2023-04-23T15:47:13.000Z</published>
    <updated>2023-04-23T16:32:05.975Z</updated>
    
    <content type="html"><![CDATA[<p>在实际使用过程中会涉及到自动化操作(比如需要将xxx文件拷贝到xxx)。自动化操作就可以降低使用者的操作难度，只需双击即可。这样的话，就会设计到.bat文件的编写。<br>本文只是提供了一些案例以及相关的参考文章</p><span id="more"></span><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ol><li><p>创建文件夹：<strong>md</strong> D:\mybat     &#x2F;&#x2F;将在D盘下创建一个名为 mybat的文件夹</p></li><li><p>删除文件夹：<strong>rd</strong> D:\mybat     &#x2F;&#x2F;将删除D盘中的mybat文件夹删除 </p></li><li><p>删除文件夹中的文件： </p><ul><li><strong>del</strong> D:\mybat\sheepmu.txt &#x2F;&#x2F;删除文件sheepmu.txt   </li><li><strong>del</strong> D:\mybat\sheepmu.txt <strong>&#x2F;q</strong> &#x2F;&#x2F;删除时不弹出是否删除的提示框</li></ul></li><li><p>复制文件 ：<strong>copy</strong> D:\mybat\sheepmu.txt D:\mybat1  &#x2F;&#x2F;若D中无mybat1这个文件夹则会创建文件夹再复制 </p></li><li><p>向文件中写入内容：<strong>echo</strong> sheepmu <strong>&gt;&gt;</strong> D:\mybat\sheepmu.txt   </p><ul><li>如果这个文件不存在就创建文件并输入。</li><li>如果是文件夹不存在就不会成功！ </li><li><strong>&gt;&gt;与&gt;的区别是</strong> &gt;是覆盖掉原来的；&gt;&gt;是直接输入到原来的尾部</li></ul></li><li><p>显示文件中内容：<strong>type</strong> D:\mybat\sheepmu.txt</p></li><li><p>更改文件名后缀：<strong>ren</strong> D:\mybat*.txt  *.html</p></li></ol><h1 id="个人案例"><a href="#个人案例" class="headerlink" title="个人案例"></a>个人案例</h1><h2 id="案例1："><a href="#案例1：" class="headerlink" title="案例1："></a>案例1：</h2><p><strong>代码块</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">chcp 65001</span><br><span class="line">@echo off</span><br><span class="line">echo ---------------</span><br><span class="line"></span><br><span class="line">set path_zh_CN=%userprofile%\Documents\maya\2022\zh_CN\scripts</span><br><span class="line">set path_normal=%userprofile%\Documents\maya\2022\scripts</span><br><span class="line"></span><br><span class="line">if exist %path_zh_CN% (</span><br><span class="line">echo %path_zh_CN%</span><br><span class="line">copy  &quot;%cd%\startup\maya\scripts\userSetup.py&quot;  %path_zh_CN%</span><br><span class="line">) else (</span><br><span class="line">echo %path_normal%</span><br><span class="line">copy  &quot;%cd%\startup\maya\scripts\userSetup.py&quot;  %path_normal%</span><br><span class="line">)</span><br><span class="line">echo Maya文件替换完成</span><br><span class="line">pause</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>代码解释</strong></p><ul><li>chcp 65001    在CMD窗口中能正确的显示中文</li><li>@echo off     把后面的回显关闭</li><li>echo ——   打印——</li><li>set xx&#x3D;xx     设置变量<ul><li><strong>%userprofile%    用户配置文件地址。</strong>例如：c:\users\xxx</li></ul></li><li>if exist      如果存在文件夹地址，则…</li><li>copy A B      拷贝A 到 B</li><li>pause         暂停</li></ul><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><blockquote><blockquote><p><a href="https://blog.csdn.net/weixin_30826761/article/details/95213418"><strong>简单的bat文件编写</strong></a> 这篇文中介绍了一个检查文本文件是否含有xxx信息的安利，如果找到了则xxx</p></blockquote></blockquote><blockquote><blockquote><p><a href="https://blog.csdn.net/CSDN_wangmj/article/details/104151131"><strong>最最基础的bat语言的使用</strong></a> 适合新手～</p></blockquote></blockquote><blockquote><blockquote><p><a href="https://blog.csdn.net/tjcwt2011/article/details/120175323"><strong>进阶版bat语言</strong></a> 之后当字典查～</p></blockquote></blockquote><blockquote><blockquote><p>ps：这周在赶BJFF，所以没有写太多的内容，就这样水一篇文章吧。。</p></blockquote></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;在实际使用过程中会涉及到自动化操作(比如需要将xxx文件拷贝到xxx)。自动化操作就可以降低使用者的操作难度，只需双击即可。这样的话，就会设计到.bat文件的编写。&lt;br&gt;本文只是提供了一些案例以及相关的参考文章&lt;/p&gt;</summary>
    
    
    
    <category term="Pipeline" scheme="http://example.com/categories/Pipeline/"/>
    
    
    <category term="Pipeline" scheme="http://example.com/tags/Pipeline/"/>
    
  </entry>
  
  <entry>
    <title>色彩空间</title>
    <link href="http://example.com/2023/04/15/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4/"/>
    <id>http://example.com/2023/04/15/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4/</id>
    <published>2023-04-15T06:09:40.000Z</published>
    <updated>2023-04-16T17:08:29.511Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章介绍了 个人对色彩空间的一些理解、制作流程中色彩空间的管理与设置、以及一些软件具体相关的设置</p><span id="more"></span> <h1 id="个人理解【可能存在问题···】"><a href="#个人理解【可能存在问题···】" class="headerlink" title="个人理解【可能存在问题···】"></a>个人理解【可能存在问题···】</h1><blockquote><p>毕竟我是一个工科生，所以先用一个最最最工科的思维来理解色彩空间</p></blockquote><p>色彩空间的规则，相当于一套<strong>编码器、解码器</strong></p><p>我们要理解的是 我们的电脑屏幕一般都是sRGB的色彩空间<br>但是 我们如果要去渲染的话 都要在线性空间下</p><p>也就是 用色彩空间设置 把原色彩空间下的图片转换为线性空间，然后再去渲染</p><p>一般在制作颜色贴图的时候，因为是根据我们屏幕看到的来制作的，所以是在srgb色彩空间下的<br>制作灰度贴图的时候，是根据线性空间来制作的，所以在线性空间下的。</p><p><strong>那为什么要引入另外的色彩空间呢？例如：ACES-cg等</strong><br>因为这些色彩空间的色域丰富，所以在渲染计算的时候会保留更多的色彩信息。<br><img src="/2023/04/15/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4/02.jpeg" alt="示例"></p><h1 id="一般Pipeline流程使用的方法"><a href="#一般Pipeline流程使用的方法" class="headerlink" title="一般Pipeline流程使用的方法"></a>一般Pipeline流程使用的方法</h1><ul><li>制作颜色贴图时，使用SRGB输出</li><li>制作线性贴图时，使用Linear输出</li><li>在houdini中<ul><li>颜色贴图的输入 使用SRGB输入解码到线性空间</li><li>线性贴图使用linear直接输入</li><li>渲染时 输出 ACES-cg的 exr贴图即可</li></ul></li><li>在RV、或者nuke、达芬奇中用ACES-cg来转换</li></ul><p><img src="/2023/04/15/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4/05.jpg" alt="示例"></p><p>电影的是DCI-P3～</p><h1 id="假如贴图如果全部使用ACES-cg："><a href="#假如贴图如果全部使用ACES-cg：" class="headerlink" title="假如贴图如果全部使用ACES-cg："></a>假如贴图如果全部使用ACES-cg：</h1><p>例如制作线性贴图时，使用ACES-cg输出–一次从Raw到ACES-cg的编码<br>输入时 ACES-cg 输入 的一次解码<br>这里多了两次转换，而每一次转换都会损失一定的数据<br>所以建议最好还是按照上面的流程来</p><h1 id="在制作贴图时的工作色彩空间："><a href="#在制作贴图时的工作色彩空间：" class="headerlink" title="在制作贴图时的工作色彩空间："></a>在制作贴图时的工作色彩空间：</h1><p>对比的是左右两张图片的差异 左是SP窗口， 右是houdini渲染后输出<br>ACES-cg颜色空间下制作的贴图的效果对比<br><img src="/2023/04/15/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4/03.png" alt="示例"><br>sRGB颜色空间下制作的贴图的效果对比<br><img src="/2023/04/15/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4/04.png" alt="示例"><br>其实差别不是很大，在sRGB空间下的右边的图稍稍深一些<br>所以只要颜色空间编解码正确，在哪个空间制作贴图其实对最后的结果差别不是很大。<br>但是 可以看出来在<strong>ACES-cg空间</strong>下制作的贴图<strong>色彩更加饱满</strong>、以及左右两边的<strong>误差更加小一些</strong></p><blockquote><p>所以在这里其实有一个疑问，假如说是在ACES-cg空间下制作的贴图，<strong>是不是输出ACES-cg会好一些？</strong><br><strong>解释一：</strong>但是在制作的过程中，很多都需要外包，而外包的制作流程是在sRGB下居多，所以可能会考虑到外包的因素，统一使用sRGB<br><strong>解释二：</strong>更多的时候，我们会需要同时用到sp和sd两个工具制作贴图，而这两个如果从别的地方导入的贴图要设置「使用sRGB导入」而 在这两个制作好的贴图之间要设置「使用ACES-cg导入」。这样会导致制作过程更加的混乱，所以还不如直接大家统一使用sRGB导入导出</p></blockquote><h1 id="RV的设置"><a href="#RV的设置" class="headerlink" title="RV的设置"></a>RV的设置</h1><ol><li>根据需要重写了一下插件的代码<br><a href="ocio_source_setup.py">代码</a></li><li>将该文件放在 [RV的安装目录]\plugins\Python  下，替换原有的文件</li><li>点击RV进入配置菜单，在Packages里上加载OpenColorIO的插件包：<br><img src="/2023/04/15/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4/06.png" alt="image"></li><li>重新启动RV，自动会根据图片的名称中含有的关键字，自动设置颜色空间</li></ol><hr><p>这里把RV的一些设置打印了出来。「sRGB图像的输入」</p><ul><li>inColorSpace ：Utility - sRGB - Texture<br>outColorSpace：ACES - ACEScg<br>图片由sRGB空间转换到了ACES - ACEScg空间</li><li>inColorSpace：ACES - ACEScg<br>ocio_display：sRGB<br>最后由ACES - ACEScg空间转换到了sRGB空间 来给大家观看<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INFO: Read image info from C:/Users/63201/Desktop/testColor/SP1.2/Toad_Final_Scale_Low_Toad_BaseColor_Utility - sRGB - Texture.png</span><br><span class="line">result:[&#123;&#x27;nodeType&#x27;: &#x27;OCIOFile&#x27;, &#x27;context&#x27;: &#123;&#125;, &#x27;properties&#x27;: &#123;&#x27;ocio.function&#x27;: &#x27;color&#x27;, &#x27;ocio.inColorSpace&#x27;: &#x27;Utility - sRGB - Texture&#x27;, &#x27;ocio_color.outColorSpace&#x27;: &#x27;ACES - ACEScg&#x27;&#125;&#125;, &#123;&#x27;nodeType&#x27;: &#x27;RVLensWarp&#x27;, &#x27;context&#x27;: &#123;&#125;, &#x27;properties&#x27;: &#123;&#125;&#125;]</span><br><span class="line">INFO: using OCIOFile node for sourceGroup000000_source RVLinearizePipelineGroup</span><br><span class="line">result:[&#123;&#x27;nodeType&#x27;: &#x27;OCIOLook&#x27;, &#x27;context&#x27;: &#123;&#125;, &#x27;properties&#x27;: &#123;&#x27;ocio.function&#x27;: &#x27;look&#x27;, &#x27;ocio.inColorSpace&#x27;: &#x27;ACES - ACEScg&#x27;&#125;&#125;]</span><br><span class="line">INFO: using OCIOLook node for sourceGroup000000_source RVLookPipelineGroup</span><br><span class="line">result:[&#123;&#x27;nodeType&#x27;: &#x27;OCIODisplay&#x27;, &#x27;context&#x27;: &#123;&#125;, &#x27;properties&#x27;: &#123;&#x27;ocio.function&#x27;: &#x27;display&#x27;, &#x27;ocio.inColorSpace&#x27;: &#x27;ACES - ACEScg&#x27;, &#x27;ocio_display.view&#x27;: &#x27;sRGB&#x27;, &#x27;ocio_display.display&#x27;: &#x27;ACES&#x27;&#125;&#125;]</span><br><span class="line">INFO: using OCIODisplay for display: DELL U2414H (0)</span><br><span class="line">INFO: C:/Users/63201/Desktop/testColor/SP1.2/Toad_Final_Scale_Low_Toad_BaseColor_Utility - sRGB - Texture.png</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://opencolorio.readthedocs.io/en/latest/api/_index.html#api">相关的API</a></p></blockquote></li></ul><h1 id="SP软件的设置"><a href="#SP软件的设置" class="headerlink" title="SP软件的设置"></a>SP软件的设置</h1><p>具体的设置我就不写了，这里只是提供一些技术上的帮助～<br>SP的设置可以在config.oico中加入这些设置，这样可以方便设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">substance_3d_painter_bitmap_import_8bit: Utility - sRGB - Texture</span><br><span class="line">substance_3d_painter_bitmap_import_16bit: Utility - sRGB - Texture</span><br><span class="line">substance_3d_painter_bitmap_import_floating: Utility - Linear - sRGB</span><br><span class="line">substance_3d_painter_bitmap_export_8bit: Utility - sRGB - Texture</span><br><span class="line">substance_3d_painter_bitmap_export_16bit: Utility - sRGB - Texture</span><br><span class="line">substance_3d_painter_bitmap_export_floating: Utility - Raw</span><br><span class="line">substance_3d_painter_substance_material: Utility - sRGB - Texture</span><br><span class="line">substance_3d_painter_standard_srgb: Utility - sRGB - Texture</span><br></pre></td></tr></table></figure><p>除此之外，SP和SD都要设置环境贴图的空间为Utility - Linear - sRGB(?)<br>(正确的?)：Utility - Linear - sRGB<br><img src="/2023/04/15/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4/07.png" alt="image"><br>(错误的?)：ACES-cg<br><img src="/2023/04/15/%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4/08.png" alt="image"></p><h1 id="Houdini的设置"><a href="#Houdini的设置" class="headerlink" title="Houdini的设置"></a>Houdini的设置</h1><p>只是在env中加一个OCIO的环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OCIO = &quot;ocio的地址&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇文章介绍了 个人对色彩空间的一些理解、制作流程中色彩空间的管理与设置、以及一些软件具体相关的设置&lt;/p&gt;</summary>
    
    
    
    <category term="Pipeline" scheme="http://example.com/categories/Pipeline/"/>
    
    
    <category term="Pipeline" scheme="http://example.com/tags/Pipeline/"/>
    
  </entry>
  
  <entry>
    <title>关于Houdini的Python环境的搭建</title>
    <link href="http://example.com/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2023-04-11T15:06:00.000Z</published>
    <updated>2023-04-16T16:20:05.190Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章具体写了VSCode以及PyCharm配置Houdini、vex环境 以及代码自动补全相关的内容…</p><span id="more"></span> <h1 id="一、推荐"><a href="#一、推荐" class="headerlink" title="一、推荐"></a>一、推荐</h1><ul><li>如果是vex的话，推荐使用houdiniExprEditor插件链接VSCode</li><li>如果是小功能的python代码，使用安装好环境的VSCode或者Pycharm 新建一个文件，编写好后复制到houdini中运行</li><li>如果是制作插件，推荐使用Pycharm做结构性文件，然后在houdini中编写一个python文件链接到该插件的地址</li></ul><hr><h1 id="二、使用houdiniExprEditor-插件来链接IDE"><a href="#二、使用houdiniExprEditor-插件来链接IDE" class="headerlink" title="二、使用houdiniExprEditor 插件来链接IDE"></a>二、使用houdiniExprEditor 插件来链接IDE</h1><p>这里其实就只是在IDE中可以直接链接houdini中的代码编辑器而已，只是换了一个编写IDE（这里推荐使用VSCode）<br>对于python来说 这个IDE也没有自动补全方法（不推荐）；还不如在2、3配置完的环境中写好代码，然后复制粘贴代码<br>对于Vex来说，在VSCode中装vex相关的自动补全插件后，即可自动补全代码（推荐！）</p><p>1、houdiniExprEditor插件<a href="http://cgtoolbox.com/houdini-expression-editor/">下载路径</a><br>将其解压后，放置你自己的路径中，然后在houdini.env中的HOUDINI_PATH加入该路径<br>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOUDINI_PATH = &quot;$HOUDINI_PATH;你放置插件的路径/HoudiniExprEditor_v1_4_8;&amp;&quot;</span><br></pre></td></tr></table></figure><p>2、在houdini中的Edit-&gt; Set External Text Editor 指认为你的IDE软件路径（推荐VSCode）<br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/04.png" alt="示例"><br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/05.png" alt="示例"><br>3、VSCode中安装插件<br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/06.png" alt="示例"><br>4、使用的场景：</p><ul><li>vex：在红色区域 右键-&gt;Expression -&gt; Edit in External Editor（推荐！）<br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/07.png" alt="示例"></li><li>toolbar： 直接在图标上右键，Edit in external editor<br> <img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/08.png" alt="示例"> </li><li>python node：在红色区域 右键-&gt;Expression -&gt; Edit in External Editor<br> <img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/09.png" alt="示例"></li></ul><blockquote><p><a href="https://www.bilibili.com/video/BV18V411a75k/?p=1&vd_source=e886403e6dd3a712bdbdfe8af7cc5a1b">参考视频</a></p></blockquote><hr><h1 id="三、使用VSCode配置环境"><a href="#三、使用VSCode配置环境" class="headerlink" title="三、使用VSCode配置环境"></a>三、使用VSCode配置环境</h1><p>对于一个完整的python环境来说，需要配置python的环境，自动补全等。</p><p>1、在VSCode 中设置interpreter<br> <img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/10.png" alt="示例"><br>设置 interpreter path为<br>D:\Program Files\Side Effects Software\Houdini 19.5.303\bin\hython3.9.exe（根据自己的环境设置）<br>2、设置Settings，左下方的齿轮-&gt;Settings<br> <img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/11.png" alt="示例"><br>右上角 转换为.json文件<br> <img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/12.png" alt="示例"><br> 然后在下面粘贴配置（根据自己安装houdini的路径设置）：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;python.autoComplete.extraPaths&quot;: [ &quot;D:\\Program Files\\Side Effects Software\\Houdini 19.5.303\\houdini\\python3.9libs&quot; ],</span><br><span class="line">&quot;python.autoComplete.preloadModules&quot;: [&quot;hou&quot;],</span><br><span class="line">&quot;terminal.integrated.env.windows&quot;: &#123; </span><br><span class="line">    &quot;PYTHONPATH&quot; : &quot;D:\\Program Files\\Side Effects Software\\Houdini 19.5.303\\houdini\\python3.9libs&quot;,</span><br><span class="line">    &quot;PATH&quot; : &quot;$&#123;env:PATH&#125;;D:\\Program Files\\Side Effects Software\\Houdini 19.5.303\\bin&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;python.analysis.extraPaths&quot;: [</span><br><span class="line">    &quot;D:\\Program Files\\Side Effects Software\\Houdini 19.5.303\\houdini\\python3.9libs&quot;]</span><br></pre></td></tr></table></figure></p><p>3、重启VSCode之后即有自动补全（但是一开始加载的时候很慢很慢）<br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/13.png" alt="示例"><br>4、运行时，使用Run Python File 可以运行该代码<br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/14.png" alt="示例"></p><blockquote><p><a href="https://jurajtomori.wordpress.com/2018/02/20/houdini-tip-using-hou-module-in-visual-studio-code/">参考文章</a></p></blockquote><hr><h1 id="四、使用Pycharm直接配置环境"><a href="#四、使用Pycharm直接配置环境" class="headerlink" title="四、使用Pycharm直接配置环境"></a>四、使用Pycharm直接配置环境</h1><p>【运行部分可能存在问题】</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里使用pycharm来直接配置环境，以我houdini19.5的配置环境为例<br><strong>1、设置python的interpreter为houdini中的python3.9.exe</strong><br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/houdinipython01.png" alt="示例"></p><p><strong>2、在project structure中需要加入…&#x2F;Houdini19.5.xxx&#x2F;houdini&#x2F;python3&#x2F;9libs (这个是加载hou 这个库 的关键)</strong></p><p><strong>3、然后在这个中加入一些需要导入的依赖库</strong><br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/houdinipy2.png" alt="示例"><br><strong>4、hou自动补全出现不了？？</strong><br>由于Pycharm 对于文件的大小有限制，hou的库太大了，所以把限制大小改大即可</p><p><strong>解决方案：</strong>  Help -&gt; Edit Custom Properties 然后在idea.properties 中 加入 一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idea.max.intellisense.filesize=5000</span><br></pre></td></tr></table></figure><p>即可<br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/houdinipython03.png" alt="示例"></p><blockquote><p><a href="https://www.bilibili.com/video/BV1pi4y1S7DC/?spm_id_from=333.880.my_history.page.click&vd_source=e886403e6dd3a712bdbdfe8af7cc5a1b">参考视频</a><br><a href="https://cloud.tencent.com/developer/article/1577327">参考链接1</a><br><a href="https://www.sidefx.com/forum/topic/74269/">参考链接2</a></p></blockquote><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>关于运行的问题，这里直接运行不了，确实是因为python3.9.exe 没有hou的库<br>（这里如果不需要运行的话，就可以复制代码，在houdini中粘贴，在houdini中运行，也是比较推荐的。然后使用python os库的chdir或者用os.path.join方法在sys.path中加入该python地址 <a href="https://www.bilibili.com/video/BV18V411a75k?p=6&vd_source=e886403e6dd3a712bdbdfe8af7cc5a1b">视频链接</a>）<br>如果确实需要运行，将Interpreter添加D:\Program Files\Side Effects Software\Houdini 19.5.303\bin\hython3.9.exe<br>但是pycharm识别不来hython3.9.exe。所以将 hython3.9.exe 复制一份，改名为python3.9.exe<br>然后就可以添加了<br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/15.png" alt="示例"><br>然后运行就可以了<br>因为会出现找不到packaging的问题，暂时不清楚有什么影响<br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/16.png" alt="示例"></p><hr><h1 id="关于houdini内部节点的自动补全"><a href="#关于houdini内部节点的自动补全" class="headerlink" title="关于houdini内部节点的自动补全"></a>关于houdini内部节点的自动补全</h1><p>在上述安装后，houdini.Node等内部的函数还是没有办法自动补全，所以需要参考下面的内容</p><p>如果直接用hou返回的数据定义的变量，这里补全不了<br>所以使用下面的方式加入定义，即可自动补全<br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/17.png" alt="示例"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myNode:hou.Node= hou.node(&#x27;./obj&#x27;)</span><br></pre></td></tr></table></figure><p><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/18.png" alt="示例"><br>以及定义函数的返回的类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def length_of_two_added_vectors(a: hou.Vector3, b: hou.Vector3) -&gt; hou.Vector3:</span><br><span class="line">    &quot;&quot;&quot;Return length of a sum of two vectors.&quot;&quot;&quot;</span><br><span class="line">    sum_vec: hou.Vector3 = a + b</span><br><span class="line">    return sum_vec</span><br><span class="line"></span><br><span class="line">def length_of_two_added_vectors2(a: hou.Vector3, b: hou.Vector3 ):</span><br><span class="line">    &quot;&quot;&quot;Return length of a sum of two vectors.&quot;&quot;&quot;</span><br><span class="line">    sum_vec: hou.Vector3 = a + b</span><br><span class="line">    return sum_vec</span><br></pre></td></tr></table></figure><p>这里定义了两个函数，第一个定义了返回的值，第二个没有定义<br>定义了返回的值：<br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/19.png" alt="示例"><br>没有定义返回的值，python就去猜返回的类型：<br><img src="/2023/04/11/%E5%85%B3%E4%BA%8EHoudini%E7%9A%84Python%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/20.png" alt="示例"></p><blockquote><p><a href="https://jtomori.github.io/2022/2022-07-07.html">文章链接</a></p></blockquote><hr><h1 id="关于-houdini-python-安装外置的库"><a href="#关于-houdini-python-安装外置的库" class="headerlink" title="关于 houdini python 安装外置的库"></a>关于 houdini python 安装外置的库</h1><blockquote><p><a href="https://blog.csdn.net/zx1091515459/article/details/129153192?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-4-129153192-blog-102995156.235%5Ev27%5Epc_relevant_recovery_v2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-4-129153192-blog-102995156.235%5Ev27%5Epc_relevant_recovery_v2&utm_relevant_index=4">参考链接</a></p></blockquote><p>这个是可用的，通过外面的python，pip安装需要的python库，然后再把安装的库复制到\python39\lib\site-packages文件夹下.</p><h1 id="PySide2库-的自动补全一直加载不出来？"><a href="#PySide2库-的自动补全一直加载不出来？" class="headerlink" title="PySide2库 的自动补全一直加载不出来？"></a>PySide2库 的自动补全一直加载不出来？</h1><p>查看了houdini 自带的pyside2（安装路径&#x2F;python39&#x2F;lib&#x2F;site-packages-forced）中的pyside2库，发现houdini已经把Pyside2封装好了。。IDE没有办法得到PySide2 内部文件的__init__文件。。</p><p>解决方法： 按照上面的安装外置库的方法，将一个PySide2的库安装到houdini中即可</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇文章具体写了VSCode以及PyCharm配置Houdini、vex环境 以及代码自动补全相关的内容…&lt;/p&gt;</summary>
    
    
    
    <category term="Houdini" scheme="http://example.com/categories/Houdini/"/>
    
    <category term="Houdini Python" scheme="http://example.com/categories/Houdini/Houdini-Python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
</feed>
